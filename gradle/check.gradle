buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.spotbugs:spotbugs-gradle-plugin:2.0.1'
    }
}

subprojects {
    if (!plugins.hasPlugin(JavaPlugin)) return      // only apply to project has java plugin

    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: com.github.spotbugs.SpotBugsPlugin
    apply plugin: 'jacoco'

    checkstyle {
        dependencies {
            checkstyle 'com.puppycrawl.tools:checkstyle:8.26'
            checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.36.0'
        }

        configFile = rootProject.file('gradle/check/checkstyle.xml')
        configProperties['configDir'] = configFile.parentFile
    }

    tasks.named('checkstyleMain').configure {
        group = 'verification'
        source = fileTree('.').matching {
            include 'conf/**'
            include 'src/main/**'
        }
    }

    tasks.named('checkstyleTest').configure {
        group = 'verification'
        source = fileTree('.').matching {
            include 'src/test/java/**'
            include 'src/test/resources/**/*.properties'    // test resource may contains java file not for compiling, so to skip
        }
    }

    pmd {
        ruleSets = []
        ruleSetFiles = rootProject.files('gradle/check/pmd.xml')
        toolVersion = '6.19.0'
        consoleOutput = true
        incrementalAnalysis = true
    }

    tasks.withType(Pmd).configureEach {
        group = 'verification'
    }

    spotbugs {
        reportLevel = 'low'
        includeFilter = rootProject.file('gradle/check/spotbugs.xml')
        toolVersion = '4.0.0-beta4'
    }

    dependencies {
        spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.6'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask).configureEach {
        group = 'verification'
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = '0.8.5'
    }

    tasks.named('jacocoTestReport').configure {
        // to generate cross sub project report, run: gradlew test && gradlew jacocoTestReport
        executionData.setFrom(fileTree(rootDir).include('build/**/jacoco/test.exec'))

        reports {
            xml.enabled = true
            xml.destination rootProject.file("${buildDir}/reports/jacoco/report.xml")
            html.enabled = true
            csv.enabled = false
        }
    }
}
